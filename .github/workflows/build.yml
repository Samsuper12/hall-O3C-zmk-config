name: Build ZMK firmware
on: [push, pull_request, workflow_dispatch]
jobs:
  build:
    uses: zmkfirmware/zmk/.github/workflows/build-user-config.yml@main
  
  collect-proto-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install West
        run: |
          pip install west
      
      - name: Prepare variables
        shell: sh -x {0}
        env:
          board: ${{ matrix.board }}
          shield: ${{ matrix.shield }}
          artifact_name: ${{ matrix.artifact-name }}
          snippet: ${{ matrix.snippet }}
        run: |
          if [ -e zephyr/module.yml ]; then
            export zmk_load_arg=" -DZMK_EXTRA_MODULES='${GITHUB_WORKSPACE}'"
            new_tmp_dir="${TMPDIR:-/tmp}/zmk-config"
            mkdir -p "${new_tmp_dir}"
            echo "base_dir=${new_tmp_dir}" >> $GITHUB_ENV
          else
            echo "base_dir=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
          fi

          if [ -n "${snippet}" ]; then
            extra_west_args="-S \"${snippet}\""
          fi

          echo "zephyr_version=${ZEPHYR_VERSION}" >> $GITHUB_ENV
          echo "extra_west_args=${extra_west_args}" >> $GITHUB_ENV
          echo "extra_cmake_args=${shield:+-DSHIELD=\"$shield\"}${zmk_load_arg}" >> $GITHUB_ENV
          echo "display_name=${shield:+$shield - }${board}" >> $GITHUB_ENV
          echo "artifact_name=${artifact_name:-${shield:+$shield-}${board}-zmk}" >> $GITHUB_ENV

      - name: Copy config files to isolated temporary directory
        run: |
          if [ "${{ env.base_dir }}" != "${GITHUB_WORKSPACE}" ]; then
            mkdir "${{ env.base_dir }}/${{ inputs.config_path }}"
            cp -R ${{ inputs.config_path }}/* "${{ env.base_dir }}/${{ inputs.config_path }}/"
          fi

      - name: Cache west modules
        uses: actions/cache@v4
        continue-on-error: true
        env:
          cache_name: cache-zephyr-${{ env.zephyr_version }}-modules
        with:
          path: |
            ${{ env.base_dir }}/modules/
            ${{ env.base_dir }}/tools/
            ${{ env.base_dir }}/zephyr/
            ${{ env.base_dir }}/bootloader/
            ${{ env.base_dir }}/zmk/
          key: ${{ runner.os }}-build-${{ env.cache_name }}-${{ hashFiles('**/west.yml', '**/build.yaml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache_name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: West Init
        working-directory: ${{ env.base_dir }}
        run: west init -l "${{ env.base_dir }}/${{ inputs.config_path }}"

      - name: West Update
        working-directory: ${{ env.base_dir }}
        run: west update --fetch-opt=--filter=tree:0
      
      - name: Collect proto files
        run: |
          mkdir -p collected-protos

          echo "Collecting proto files from modules..."

          # Get list of module paths from west
          for module_path in $(west list -f {path}); do
            if [ -d "$module_path/proto" ]; then
              echo "Found proto directory in: $module_path"
              # Copy all proto files maintaining directory structure
              find "$module_path/proto" -name "*.proto" -type f | while read proto_file; do
                # Create relative path for organizing files
                rel_path=$(echo "$proto_file" | sed "s|$module_path/||")
                target_dir="collected-protos/$(basename $module_path)/${rel_path%/*}"
                mkdir -p "$target_dir"
                cp "$proto_file" "$target_dir/"
                echo "Collected: $proto_file -> $target_dir/"
              done
            fi
          done

          # Also collect local proto files if they exist
          if [ -d "proto" ]; then
            echo "Collecting local proto files..."
            find proto -name "*.proto" -type f | while read proto_file; do
              target_dir="collected-protos/local/$(dirname $proto_file)"
              mkdir -p "$target_dir"
              cp "$proto_file" "$target_dir/"
              echo "Collected: $proto_file -> $target_dir/"
            done
          fi

          # List what we collected
          echo "=== Collected Proto Files ==="
          find collected-protos -name "*.proto" -type f

          # Create archive
          tar -czf proto-files.tar.gz -C collected-protos .
          echo "Archive contents:"
          tar -tzf proto-files.tar.gz
      
      - name: Upload proto files artifact
        uses: actions/upload-artifact@v4
        with:
          name: proto-files
          path: proto-files.tar.gz
          retention-days: 30